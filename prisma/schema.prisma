generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())

  createdProjects Project[]    @relation("CreatedProjects")
  memberships     Membership[]

  createdTasks    Task[]       @relation("CreatedTasks")
  assignedTasks   Task[]       @relation("AssignedTasks")

  comments        Comment[]
  messages        Message[]
  notifications   Notification[]
  attachments     Attachment[] @relation("UploadedBy")

  passwordResetToken   String?
  passwordResetExpires DateTime?
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startDate   DateTime?
  endDate     DateTime?

  creator   User   @relation("CreatedProjects", fields: [creatorId], references: [id])
  creatorId String

  memberships Membership[]
  Task        Task[]
  messages    Message[]
}

model Membership {
  id        String   @id @default(uuid())
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  userId   String

  project  Project  @relation(fields: [projectId], references: [id])
  projectId String

  @@unique([userId, projectId])
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project @relation(fields: [projectId], references: [id])
  projectId   String

  createdBy   User   @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById String

  assignedTo   User?   @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?

  comments     Comment[]
  attachments  Attachment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  task     Task   @relation(fields: [taskId], references: [id])
  taskId   String

  attachments Attachment[]
}

model Message {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())

  sender     User     @relation(fields: [senderId], references: [id])
  senderId   String

  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
}

model Notification {
  id         String   @id @default(uuid())
  type       String
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  recipient  User     @relation(fields: [recipientId], references: [id])
  recipientId String
}

model Attachment {
  id           String   @id @default(uuid())
  url          String
  filename     String
  uploadedAt   DateTime @default(now())

  uploadedBy   User     @relation("UploadedBy", fields: [uploadedById], references: [id])
  uploadedById String

  task         Task?    @relation(fields: [taskId], references: [id])
  taskId       String?

  comment      Comment? @relation(fields: [commentId], references: [id])
  commentId    String?
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}
